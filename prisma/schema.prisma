generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bot_histories {
  id        String   @id
  action    String
  createdAt DateTime @default(now())
  botId     String
  bots      bots     @relation(fields: [botId], references: [id])

  @@index([botId], map: "bot_histories_botId_fkey")
}

model bot_strategy_smart_limit {
  id              String @id
  buyPrice        String
  buyQuantity     String
  trailingPercent String
  stopLoss        String
  takeProfit      String
  botId           String
  bots            bots   @relation(fields: [botId], references: [id])

  @@index([botId], map: "bot_strategy_smart_limit_botId_fkey")
}

model bot_strategy_smart_market {
  id               String @id
  totalInvestments String
  trailingPercent  String
  botId            String
  bots             bots   @relation(fields: [botId], references: [id])

  @@index([botId], map: "bot_strategy_smart_market_botId_fkey")
}

model bot_strategy_spot_limit {
  id               String @id
  totalInvestments String
  buyPrice         String
  sellPrice        String
  botId            String
  bots             bots   @relation(fields: [botId], references: [id])

  @@index([botId], map: "bot_strategy_spot_limit_botId_fkey")
}

model bots {
  id                        String                      @id
  profileId                 String
  profit                    String
  pair                      String
  botStrategySmartMarketId  String?
  botStrategySmartLimitId   String?
  isActive                  Boolean                     @default(false)
  botStrategySpotLimitId    String?
  bot_histories             bot_histories[]
  bot_strategy_smart_limit  bot_strategy_smart_limit[]
  bot_strategy_smart_market bot_strategy_smart_market[]
  bot_strategy_spot_limit   bot_strategy_spot_limit[]
  profiles                  profiles                    @relation(fields: [profileId], references: [id])
  orders                    orders[]

  @@index([profileId], map: "bots_profileId_fkey")
}

model orders {
  id                String @id
  botId             String
  platformForeignId String
  bots              bots   @relation(fields: [botId], references: [id])

  @@index([botId], map: "orders_botId_fkey")
}

model platforms {
  id    String  @id
  name  String  @unique
  users users[] @relation("PlatformToUser")
}

model profiles {
  id          String  @id
  userId      String
  apiKey      String
  secretKey   String
  authToken   String?
  platformId  String
  profileName String
  bots        bots[]
  users       users   @relation(fields: [userId], references: [id])

  @@index([userId], map: "profiles_userId_fkey")
}

model users {
  id        String      @id
  name      String      @unique
  email     String      @unique
  password  String
  profiles  profiles[]
  platforms platforms[] @relation("PlatformToUser")
}
